from typing import Any, Dict, List, Optional

from mypy_extensions import TypedDict

SetCode = str

# Type as returned by scryfall fetching
CardDescription = TypedDict('CardDescription', {
    # Parts we currently use …
    'all_parts': List[Dict[str, str]],
    'artist': str,
    'card_faces': List[Any], # This should be List[CardDescription] but mypy doesn't support nested types yet.
    'cmc': float,
    'collector_number': str,
    'color_identity': List[str],
    'colors': List[str],
    'flavor_text': str,
    'hand_modifier': str,
    'id': str,
    'layout': str,
    'legalities': Dict[str, str],
    'life_modifier': str,
    'loyalty': str,
    'mana_cost': str,
    'oracle_text': str,
    'power': str,
    'name': str,
    'rarity': str,
    'reserved': bool,
    'set': str,
    'toughness': str,
    'type_line': str,
    'watermark': str,

    # … and parts we don't. Just typed as "str" for now.
    'arena_id': str,
    'booster': str,
    'border_color': str,
    'card_back_id': str,
    'color_indicator': str,
    'digital': str,
    'edhrec_rank': str,
    'foil': str,
    'frame': str,
    'frame_effect': str,
    'full_art': str,
    'games': str,
    'highres_image': str,
    'illustration_id': str,
    'image_uris': str,
    'lang': str,
    'mtgo_foil_id': str,
    'mtgo_id': str,
    'multiverse_ids': str,
    'nonfoil': str,
    'object': str,
    'oracle_id': str,
    'oversized': str,
    'printed_name': str,
    'printed_text': str,
    'printed_type_line': str,
    'prints_search_uri': str,
    'promo': str,
    'promo_types': str,
    'related_uris': str,
    'released_at': str,
    'reprint': str,
    'rulings_uri': str,
    'scryfall_set_uri': str,
    'scryfall_uri': str,
    'set_name': str,
    'set_search_uri': str,
    'set_type': str,
    'set_uri': str,
    'story_spotlight': str,
    'tcgplayer_id': str,
    'textless': str,
    'uri': str,
    'variation': str,
    'variation_of': str
})
